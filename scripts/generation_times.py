import os, numpy as np, msprime, pyslim, re
from tqdm import tqdm
import altair
import pandas
from matplotlib import pyplot as plt
import scikit-misk
os.chdir("/Users/cj/spaceness")

#read through all-individual ts to get mean parent ages along a  sparsetree ...
sims=[x for x in os.listdir("/Users/cj/Desktop/spaceviz/all_ind_trees/") if not x.startswith(".")]
gen_times=np.zeros((len(sims),2))
for i in range(len(sims)):
    ts=pyslim.load(os.path.join("/Users/cj/Desktop/spaceviz/all_ind_trees/",sims[i]))
    sigma=float(re.split("_|s",sims[i])[1])
    node_times = ts.tables.nodes.time
    parent_nodes = ts.tables.edges.parent
    child_nodes = ts.tables.edges.child
    max_T = 100 # number of time steps you recorded everyone for
    # which edges in the EdgeTable correspond to reproduction events we have parent and offspring Remembered
    use_these = (node_times[parent_nodes] < max_T)
    parent_ages = node_times[parent_nodes] - node_times[child_nodes]
    gen_times[i,:]= [np.mean(parent_ages[use_these]),sigma]
   
gen_times=pandas.DataFrame(gen_times,columns=["gen_time","sigma"])
plt.scatter(gen_times["sigma"],gen_times["gen_time"],
            edgecolors="black",facecolors="none")
plt.show()
plt.close()

#fit loess curve to generation times, use for predicting gen time of no-mutation slim sims
model=sm.nonparametric.lowess(gen_times["gen_time"],gen_times["sigma"])
plt.plot()




#estimate generation time by comparing n mutations generated by msprime.mutate() (muts/timestep) v slim (muts/generation)
def guess_gen_time(ts):
    t=pyslim.load(ts)
    slim_muts=t.num_mutations
    g=4
    msp_t=msprime.mutate(t,1e-8/g,keep=False) #slim mutation rate was set to 1e-8
    msp_muts=msp_t.num_mutations
    while abs(msp_muts-slim_muts) > 0.01*slim_muts:
        new_g=g+np.random.uniform(-1,1,1)
        new_msp_t=msprime.mutate(t,1e-8/new_g,keep=False)
        new_msp_muts=new_msp_t.num_mutations
        if abs(new_msp_muts-slim_muts) < abs(msp_muts-slim_muts):
            msp_muts=new_msp_muts
            g=new_g
    return g[0]

#testing
sims=os.listdir("sims/slimout/spatial/W16_muts/")
ts=sims[1]
t=pyslim.load(os.path.join("sims/slimout/spatial/W16_muts/",ts))
slim_muts=t.num_mutations
g=4
msp_t=msprime.mutate(t,1e-8/g,keep=False) #slim mutation rate was set to 1e-8
msp_muts=msp_t.num_mutations

#loop over sims 
gen_times=np.zeros((len(sims),2))
for i in tqdm(range(len(sims))):
    g=guess_gen_time(os.path.join("sims/slimout/spatial/W16_muts/",sims[i]))
    sigma=float(re.split("_",sims[i])[1])
    gen_times[i,:]=[g,sigma]

#plot
gen_times=pandas.DataFrame(gen_times,columns=["gen_time","sigma"])
plt.scatter(gen_times["sigma"],gen_times["gen_time"],
            edgecolors="black",facecolors="none")
plt.show()
plt.close()


#altair
# plot=altair.Chart(gen_times).mark_point().encode(
#     x="sigma",
#     y="gen_time"
# )
# plot.encode(Y('gen_time',scale=Scale(domain[4,6]))) #how is setting axis limits not documented???
# plot.save("/users/cj/Desktop/test.html")
