initialize() {

    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy");
    initializeTreeSeq();

	 sigma=0.5;

    defineConstant("K", 5);  // carrying-capacity per unit square (roughly)
    defineConstant("SD", sigma);  // sigma_D, the dispersal distance
    defineConstant("SI", sigma);  // sigma_I, the spatial interaction distance
    defineConstant("SM", SI);  // sigma_M, the mate choice distance
    defineConstant("L", 4);    // mean lifetime at stationarity
    defineConstant("W", 50.0);  // width and height of the simulated area
    defineConstant("G", 1e8);  // genome length
    defineConstant("FECUN", 1/L); // mean fecundity
    defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
    defineConstant("DensityGridSize", asInteger(c(W, W)/(2*sigma))); //population density grid size for competition calls

    initializeMutationType("m1", 0.5, "g", 0.0, 2);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, G-1);
    initializeMutationRate(0.0);
    initializeRecombinationRate(1e-9);
    
    // spatial competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
    i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
    
    // mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
    i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}

1 early() { // set initial population configuration
    sim.addSubpop("p1", asInteger(K * W * W));
    p1.setSpatialBounds(c(0, 0, W, W));
    for (ind in p1.individuals) {
        ind.setSpatialPosition(p1.pointUniform());
            }
    i1.evaluate();
}

early() { //competition
	 i1.evaluate();
	 
	 //get interaction strength grid for faster queries (via tortoisescape)
	 bounds=p1.spatialBounds;
	 m=float(product(DensityGridSize));
	 i = 0;
  	 for (y in seq(from=bounds[1], to=bounds[3], length=DensityGridSize[1]))
    {
      for (x in seq(from=bounds[0], to=bounds[2], length=DensityGridSize[0]))
      {
        mPoint = c(x,y);
        neighbors = i1.nearestNeighborsOfPoint(p1, mPoint, count=1000000);
        distances = i1.distanceToPoint(neighbors, mPoint);
        strengths = SM * (exp(-(distances * distances) / (2.0 * (1.0/(2*PI*SM^2)) * (1.0/(2*PI*SM^2)))));
        density = sum(strengths);
        
        m[i] = density;
        i = i + 1;
      }
    }
    p1.defineSpatialMap("density", "xy", DensityGridSize, m, interpolate=T, valueRange=c(0.0, 5*K), colors=c('black', 'white'));

    inds = p1.individuals;
    competition=c();
    for(ind in p1.individuals){
    	competition=c(competition,p1.spatialMapValue("density",ind.spatialPosition));
    }
    inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));    
    
    // decrease fitness as individuals approach edges (fitness decreases as the square root of the distance to an edge in units of sigma, the sd of the interaction function)
    inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
}

1: late() {
	// to be ready for mate choice
   i2.evaluate(p1);
}

reproduction() {
    // choose mate proportional to interaction strength
    mate = i2.drawByStrength(individual, 1);
    if (mate.size()) {
        nOff = rpois(1, FECUN);
        for (i in seqLen(rpois(1, 1/L))) {
            pos = individual.spatialPosition + rnorm(2, 0, SD);
            if (p1.pointInBounds(pos)) {
            offspring = subpop.addCrossed(individual, mate);
          	offspring.setSpatialPosition(p1.pointReflected(pos));
          	}
        }
    }
    return;
}

2000000 late() {
	outname=outpath+"_"+format("%.0f",runif(1,1e6,1e7-1));
   sim.treeSeqOutput(outname);
   sim.simulationFinished();
}
