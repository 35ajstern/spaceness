initialize() {

    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy");
    //initializeTreeSeq(checkCoalescence=T);

	 //sigma=1;
	 //defineConstant("outpath","/Users/cj/Desktop/W50_0.2_.trees");
	 
	 defineConstant("id",format("%.0f",runif(1,1e6,1e7-1)));

    defineConstant("K", 5);  // carrying-capacity per unit square (roughly)
    defineConstant("SD", 0.5);  // sigma_D, the dispersal distance
    defineConstant("SI", 0.5);  // sigma_I, the spatial interaction distance
    defineConstant("SM", 0.5);  // sigma_M, the mate choice distance
    defineConstant("L", 2);    // mean lifetime at stationarity
    defineConstant("W", 50.0);  // width and height of the simulated area
    defineConstant("FECUN", 1/L); // mean fecundity
    defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function

    initializeMutationType("m1",0.5,"g",0.0,2); // neutral mutations
    initializeMutationType("m2",0.5,"g",0.0,2); // dispersal-enhancing mutations (count of m2 scales baseline dispersal distance)
    initializeMutationType("m3",0.5,"g",0.0,2); // direction-enhancing mutations (count of m3 scales ratio of y:x dispersal) 
    initializeGenomicElementType("g1", c(m1,m2,m3), c(0.99,0.009,0.001));
    initializeGenomicElement(g1, 0, 1e7-1);
    initializeMutationRate(1e-7);
    initializeRecombinationRate(1e-7);  
    
    // spatial competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
    i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
    
    // mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
    i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}

//starting positions
1 early() {
    sim.addSubpop("p1", 5000);
    p1.setSpatialBounds(c(0, 0, W, W));
    for (ind in p1.individuals) {
        ind.setSpatialPosition(c(runif(1,0,50),runif(1,0,20)));
    }
    i1.evaluate();
    
    writeFile("/Users/cj/Desktop/migration_slim_stats.txt",
             "mean_nm2"+"\t"+"mean_nm3"+"\t"+"north_mean_nm2"+"\t"+"north_mean_nm3"+"\t"+"maxy"+"\t"+"meany");
}


reproduction() {
    mate = i2.drawByStrength(individual, 1);
    if (mate.size()) {
    	  if(mate.y>20){
    	  	 nOff=rpois(1,3*FECUN);
    	  } else {
    	  	 nOff = rpois(1, FECUN);
    	  }
        for (i in seqLen(nOff)) {
        		offspring = subpop.addCrossed(individual, mate);
        		nm2=offspring.countOfMutationsOfType(m2);
        		nm3=offspring.countOfMutationsOfType(m3);
        		if(nm3>=1){	
        			if(sin((3.141593/10)*sim.generation)>0){ //go north if sim.generation/nm3>0
        				direction = 1;
        			} else { //go south if sim.generation/nm3<0
        				direction = -1;
        			}
        		} else {
        			direction=sample(c(1,-1),1);
        		}
        		newx=individual.x+rnorm(1,0,(SD*(1+nm2))/(nm3+1));
        		newy=individual.y+abs(rnorm(1,0,SD*(1+nm2)*(nm3+1)))*direction;
            pos = p1.pointStopped(c(newx,newy)); //if you disperse outside the range you end up on the edge and (probably) die
          	offspring.setSpatialPosition(pos);
        }
    }
    return;
}

early() {
    i1.evaluate(p1);
    inds = p1.individuals;    
    competition = i1.totalOfNeighborStrengths(inds); //density-dependent competition is constant
    inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));
    
    seasonal_limit=max(15.0,15.0+sin((3.141593/10)*sim.generation)*35.0); //northern range limit fluctuates cyclically with period = 6 timesteps
    inds.fitnessScaling = inds.fitnessScaling * pmax(0.1,asFloat(inds.y < seasonal_limit)); //low survival for individuals in nonsuitable climates
    //inds.fitnessScaling = inds.fitnessScaling * pmax(0.9,asFloat(inds.y > 15)); //slightly lower survival in the nonseasonal range

    // fitness desclines at range edges
    inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
}

1: late() {
	// to be ready for mate choice
   i2.evaluate(p1);
   south_m2count=c();south_m3count=c();
   north_m2count=c(0);north_m3count=c(0);
   //south_nm3_4=c(0);north_nm3_4=c(0);
   for(ind in p1.individuals){
   	if(ind.y<=15){ //southern (nonseasonal) range
   		south_m2count=c(ind.countOfMutationsOfType(m2),south_m2count);
   		south_m3count=c(ind.countOfMutationsOfType(m3),south_m3count);
   		//south_nm3_4=c(south_m3count==4,south_nm3_4);
   	} else if(ind.y>25){ //seasonal range
   		north_m2count=c(ind.countOfMutationsOfType(m2),north_m2count);
   		north_m3count=c(ind.countOfMutationsOfType(m3),north_m3count);
   		//north_nm3_4=c(north_m3count==4,north_nm3_4);
   	}
   }
   south_mean_nm2=mean(south_m2count);
   south_mean_nm3=mean(south_m3count);
   //south_nm3_4=mean(south_nm3_4);
   north_mean_nm2=mean(north_m2count);
   north_mean_nm3=mean(north_m3count);
	//north_nm3_4=mean(north_nm3_4);
	      
   maxy=max(p1.individuals.y);
   meany=mean(p1.individuals.y);
   writeFile("/Users/cj/Desktop/migration_slim_stats.txt",
             south_mean_nm2+"\t"+south_mean_nm3+"\t"+//south_nm3_4+"\t"+
             north_mean_nm2+"\t"+north_mean_nm3+"\t"+//north_nm3_4+"\t"+
             maxy+"\t"+meany,
             append=T);
   cat(south_mean_nm2+"\t"+south_mean_nm3+"\t"+north_mean_nm2+"\t"+north_mean_nm3+"\t"+maxy+"\t"+meany+"\n");
}

2000000 late() { //max timesteps
	//outname=outpath+"_"+id+"_"+sim.generation;
   //sim.treeSeqOutput(outname);
   sim.simulationFinished();
}
