initialize() {

    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy");
    initializeTreeSeq(checkCoalescence=T);

	 //sigma=0.2;
	 //defineConstant("outpath","/Users/cj/Desktop/W50_0.2_.trees");
	 
	 defineConstant("id",format("%.0f",runif(1,1e6,1e7-1)));

    defineConstant("K", 5);  // carrying-capacity per unit square (roughly)
    defineConstant("SD", sigma);  // sigma_D, the dispersal distance
    defineConstant("SI", sigma);  // sigma_I, the spatial interaction distance
    defineConstant("SM", SI);  // sigma_M, the mate choice distance
    defineConstant("L", 4);    // mean lifetime at stationarity
    defineConstant("W", 50.0);  // width and height of the simulated area
    defineConstant("G", 1e8);  // genome length
    defineConstant("FECUN", 1/L); // mean fecundity
    defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function

    initializeMutationType("m1", 0.5, "g", 0.0, 2);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, G-1);
    initializeMutationRate(1e-8);
    initializeRecombinationRate(1e-8);  
    
    // spatial competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
    i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
    
    // mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
    i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}

reproduction() {
    mate = i2.drawByStrength(individual, 1);
    if (mate.size()) {
        nOff = rpois(1, FECUN);
        for (i in seqLen(nOff)) {
            pos = individual.spatialPosition + rnorm(2, 0, SD);
            if (p1.pointInBounds(pos)) {
            	offspring = subpop.addCrossed(individual, mate);
          		offspring.setSpatialPosition(pos);
          	}
        }
    }
    return;
}

1 early() {
    sim.addSubpop("p1", asInteger(K * W * W));
    p1.setSpatialBounds(c(0, 0, W, W));
    for (ind in p1.individuals) {
        ind.setSpatialPosition(p1.pointUniform());
    }
    i1.evaluate();
}

early() {
    i1.evaluate(p1);
    inds = p1.individuals;
    competition = i1.totalOfNeighborStrengths(inds);
    inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));    
    // scale fitness at edges
    inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
}

1: late() {
	// to be ready for mate choice
   i2.evaluate(p1);
}

2: late() {
	 // output and status blocks
	 //if(sim.generation > 100){
    //	sim.treeSeqRememberIndividuals(p1.individuals);
    //	}
    //if((sim.generation % 1e4)==0){
    //	print(SD+" "+sim.generation);
    //}
	 if((sim.generation % 1e5)==0){
	 	if(sim.treeSeqCoalesced()){
          outname=outpath+"_"+id+"_"+sim.generation+"_coalesced";
          sim.treeSeqOutput(outname);
          //sim.simulationFinished();
      } else {
          outname=outpath+"_"+id+"_"+sim.generation;
          sim.treeSeqOutput(outname);
          //sim.simulationFinished();
      } 
    }
}

2000000 late() {
	outname=outpath+"_"+id+"_"+sim.generation;
   sim.treeSeqOutput(outname);
   sim.simulationFinished();
}
